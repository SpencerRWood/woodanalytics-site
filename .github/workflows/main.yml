name: Deploy to Droplet

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  REMOTE_PATH: ${{ secrets.DROPLET_PATH }}
  DROPLET_FINGERPRINT: ${{ secrets.DROPLET_FINGERPRINT }} # optional

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.DROPLET_HOST }}" ]; then echo "Missing secret: DROPLET_HOST"; exit 1; fi
          if [ -z "${{ secrets.DROPLET_USER }}" ]; then echo "Missing secret: DROPLET_USER"; exit 1; fi
          if [ -z "${{ secrets.DROPLET_PATH }}" ]; then echo "Missing secret: DROPLET_PATH"; exit 1; fi
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then echo "Missing secret: SSH_PRIVATE_KEY"; exit 1; fi
          echo "âœ… Secrets present"

      - name: Create remote folder
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          fingerprint: ${{ env.DROPLET_FINGERPRINT }}
          script_stop: true
          debug: true
          script: |
            set -e
            mkdir -p "${{ env.REMOTE_PATH }}"
            echo "âœ… Created/exists: ${{ env.REMOTE_PATH }}"
            whoami && hostname && uname -a

      - name: Sync repository to droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "${{ secrets.DROPLET_PATH }}"
          overwrite: true
          debug: true


      - name: Deploy containers
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          fingerprint: ${{ env.DROPLET_FINGERPRINT }}
          script_stop: true
          debug: true
        # If you are using Cloudflare Tunnel, ensure .env.prod exists on the droplet with CLOUDFLARE_TUNNEL_TOKEN
          script: |
            set -e
            cd "${{ env.REMOTE_PATH }}"

            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com | sh
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "Installing Docker Compose plugin..."
              apt-get update -y && apt-get install -y docker-compose-plugin
            fi

            docker --version
            docker compose version

            echo "ðŸš€ Deploying"
            docker compose -f docker-compose.prod.yml up -d --build

            echo "ðŸ§¹ Cleaning up dangling images"
            docker image prune -f

            echo "âœ… Deploy complete"
