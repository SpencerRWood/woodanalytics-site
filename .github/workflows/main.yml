
name: Deploy to Droplet

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  REMOTE_PATH: ${{ secrets.DROPLET_PATH }}
  KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known_hosts (with safe fallback)
        run: |
          mkdir -p ~/.ssh
          if [ -n "${KNOWN_HOSTS}" ]; then
            echo "${KNOWN_HOSTS}" >> ~/.ssh/known_hosts
          else
            # First-use fallback: trust-on-first-use of droplet host key
            ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Ensure remote folder exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          script: |
            mkdir -p "${{ env.REMOTE_PATH }}"

      - name: Sync repository to droplet (exclude dev/CI files and secrets)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          source: "."
          target: "${{ env.REMOTE_PATH }}"
          overwrite: true
          rm: true
          exclude: |
            .git*
            .github/
            .venv/
            node_modules/
            __pycache__/
            *.log
            .env.prod

      - name: Deploy containers
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          script: |
            set -e
            cd "${{ env.REMOTE_PATH }}"

            # Sanity checks
            docker --version
            if ! docker compose version >/dev/null 2>&1; then
              echo "Docker Compose plugin not found. Please install docker compose plugin on the droplet."
              exit 1
            fi

            # Deploy (build + recreate as needed)
            docker compose -f docker-compose.prod.yml up -d --build

            # Optional cleanup of dangling images
            docker image prune -f
